// =============================================================================
// Position absolute/relative, en pourcentage par defaut (autre unit√© possible)
// =============================================================================

@mixin position($top: null, $right: null, $bottom: null, $left: null, $position: absolute) {
  position: $position;
  @if ($top != null) {
      @if ($top == auto) {
          top: auto;
      } @else if unitless($top) {
          top: $top*1%;
      } @else {
          top: $top;
      }
  }
  @if ($right != null and ($position == 'absolute' or $position == 'fixed')) {
      @if ($right == auto) {
          right: auto;
      } @else if unitless($right) {
          right: $right*1%;
      } @else {
          right: $right;
      }
  }
  @if ($bottom != null and ($position == 'absolute' or $position == 'fixed')) {
      @if ($bottom == auto) {
          bottom: auto;
      } @else if unitless($bottom) {
          bottom: $bottom*1%;
      } @else {
          bottom: $bottom;
      }
  }
  @if ($left != null) {
      @if ($left == auto) {
          left: auto;
      } @else if unitless($left) {
          left: $left*1%;
      } @else {
          left: $left;
      }
  }
}

// =============================================================================
// ::before, ::after
// =============================================================================

@mixin pseudo-element($content:'', $display:block) {
  content:$content;
  display:$display;
  @content;
}

@mixin after($content:'', $display:block) {
  &::after {
      @include pseudo-element($content, $display) {
          @content;
      }
  }
}

@mixin before($content:'', $display:block) {
  &::before {
      @include pseudo-element($content, $display) {
          @content;
      }
  }
}

// =============================================================================
// String Flexbox
// =============================================================================

@mixin fx($ff: row nowrap, $jc: center, $ai: center) {
  display: flex;
  flex-flow: $ff;
  justify-content: $jc;
  align-items: $ai;
}

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}